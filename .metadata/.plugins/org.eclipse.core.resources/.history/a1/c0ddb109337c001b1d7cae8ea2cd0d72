import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.security.cert.CollectionCertStoreParameters;
import java.util.regex.*;

public class a {
   static long mod = 1000000007;

   public static void main(String[] args) throws Exception {
      FastScanner in = new FastScanner();
      PrintWriter out = new PrintWriter(System.out);

      int t = in.nextInt();
      while (t-- > 0) {
         int n = in.nextInt();
         // long n = in.nextLong();

         int a[] = new int[n];
         for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
         }
         
         int acopy[]= Arrays.copyOf(a, n);
         Arrays.sort(acopy);
         Vector<Integer> ans = new Vector<>();
         Vector<Integer> tmp = new Vector<>();
         int max=0;
         
         for(int i=n-1;i>=0;i--) {
        	 if(a[i]!=acopy[max]) {
        		 tmp.add(0,a[i]);
        		 continue;
        	 }
        	 tmp.add(0,a[i]);
        	 for(int x:tmp)
        		 ans.add(x);
        	 int tmp2=tmp.size();
        	 for(int kk=0;kk<tmp2;kk++) {
        		 tmp.remove(0);
        	 }
        	 for(int x:tmp)
        		 System.out.println("mum "+x);
        	 
        	 while(max<n) {
        		 if(ans.contains(acopy[max])) {
        			 max++;
        			 continue;
        		 }
        		 else {
        			 break;
        		 }
        	 }
         }

         for(int x:ans) {
        	 out.print(""+x+" ");
         }
         out.println();
      }
      out.close();
   }

   public static long gcd(long x, long y) {
      if (x % y == 0)
         return y;
      else
         return gcd(y, x % y);
   }

   public static long pow(long n, long p, long m) {
      long result = 1;
      if (p == 0)
         return 1;
      if (p == 1)
         return n;
      while (p != 0) {
         if (p % 2 == 1)
            result *= n;
         if (result >= m)
            result %= m;
         p >>= 1;
         n *= n;
         if (n >= m)
            n %= m;
      }
      return result;
   }

   static class Pair implements Comparable<Pair> {
      int a, b;

      Pair(int a, int b) {
         this.a = a;
         this.b = b;
      }

      public int compareTo(Pair o) {
         if (this.a != o.a)
            return Integer.compare(this.a, o.a);
         else
            return Integer.compare(this.b, o.b);
         // return 0;
      }

      public boolean equals(Object o) {
         if (o instanceof Pair) {
            Pair p = (Pair) o;
            return p.a == a && p.b == b;
         }
         return false;
      }

      public int hashCode() {
         return new Integer(a).hashCode() * 31 + new Integer(b).hashCode();
      }
   }

   static class FastScanner {
      BufferedReader br;
      StringTokenizer st;

      public FastScanner() {
         br = new BufferedReader(new InputStreamReader(System.in));
      }

      String next() {
         while (st == null || !st.hasMoreElements()) {
            try {
               st = new StringTokenizer(br.readLine());
            } catch (IOException e) {
               e.printStackTrace();
            }
         }
         return st.nextToken();
      }

      int nextInt() {
         return Integer.parseInt(next());
      }

      long nextLong() {
         return Long.parseLong(next());
      }

      String nextLine() throws IOException {
         String st = br.readLine();
         return st;
      }
   }
}