import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'candies' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. INTEGER_ARRAY arr
     */

    public static long candies(int n, List<Integer> arr) {
    	int[] dp = new int[n+5];
    
    	for(int i=0;i<n;i++) {
    		dp[i]=-1;
    	}
        
        if(arr.get(1)<arr.get(0))
            dp[0]=2;
        else
            dp[0]=1;
        solve(arr,1,dp,n);
        
        long ans=0;
        
        for(int i=0;i<n;i++) {
            ans+=dp[i];
        }
        return ans;
    }
    
    public static void solve(List<Integer> arr,int i,int[] dp,int n) {
        if(i==n-1) {
            if(arr.get(i-1)<arr.get(i)) {
                dp[i]=dp[i-1]+1;
            }
            else {
                dp[i]=1;
            }
            return;
        }
        if(dp[i]!=-1)
        	return;
        
        if(arr.get(i-1)<arr.get(i)) {
            if(i<n-1 && arr.get(i)>arr.get(i+1)) {
                solve(arr,i+1,dp,n);
                dp[i]=Math.max(dp[i-1],dp[i+1])+1;
            }
            else {
                dp[i]=dp[i-1]+1;
                solve(arr,i+1,dp,n);
            }
        }
        else if(i<n-1 && arr.get(i+1)<arr.get(i)){
            solve(arr,i+1,dp,n);
            dp[i]=dp[i+1]+1;
        }
        else{
            dp[i]=1;
            solve(arr,i+1,dp,n);
        }
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = IntStream.range(0, n).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        long result = Result.candies(n, arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
