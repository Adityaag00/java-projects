import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class A {
   static long mod = 1000000007;

   public static void main(String[] args) throws Exception {
      FastScanner in = new FastScanner();
      PrintWriter pw = new PrintWriter(System.out);

      int t = in.nextInt();
      while (t-- > 0) {
         int n = in.nextInt();
         ArrayList<Integer> one = new ArrayList<>();
         ArrayList<Integer> two = new ArrayList<>();
         ArrayList<Integer> zero = new ArrayList<>();

         int a[] = new int[n+1];
         for (int i = 1; i <=n; i++) {
            a[i] = in.nextInt();
         }
         int x=1,ans=0;
         for(int i=1;i<=n;i++) {
        	 if(a[i]%3==0) {
        		 zero.add(a[i]);
        	 }
        	 else if(a[i]%3==1) {
        		 one.add(a[i]);
        	 }
        	 else {
        		 two.add(a[i]);
        	 }
        	 
         }
         int on=one.size();
         int tw=two.size();
         int zer=zero.size();
         if(one.size()==zero.size() && zero.size()==two.size()) {
        	 ans=0;
        	 System.out.println("running");
         }
         else {
        	 int k=(one.size()+zero.size()+two.size())/3;
        	 if(one.size()<=k) {
        		 if(zero.size()>k) {
        			 int tmp = Math.min(k-one.size(),zero.size()-k);
        			 ans+=tmp;
        			 on+=tmp;
        			 zer-=tmp;
        		 }
        		 else {
        			 int tmp=Math.min(k-on,tw-k);
        			 ans+=2*tmp;
        			 on+=tmp;
        			 tw-=tmp;
        		 }
        	 }
        	 if(zer<=k) {
        		 if(tw>k) {
        			 int tmp = Math.min(k-zer,tw-k);
        			 ans+=tmp;
        			 zer+=tmp;
        			 tw-=tmp;
        		 }
        		 else {
        			 int tmp=Math.min(k-zer,on-k);
        			 ans+=2*tmp;
        			 zer+=tmp;
        			 on-=tmp;
        		 }
        	 }
        	 if(tw<=k) {
        		 if(on>k) {
        			 int tmp = Math.min(k-tw,on-k);
        			 ans+=tmp;
        			 tw+=tmp;
        			 on-=tmp;
        		 }
        		 else {
        			 int tmp=Math.min(k-tw,zer-k);
        			 ans+=2*tmp;
        			 tw+=tmp;
        			 zer-=tmp;
        		 }
        	 }
         }

         pw.println(--ans<0?0:ans);

      }
      pw.close();
   }

   public static long gcd(long x, long y) {
      if (x % y == 0)
         return y;
      else
         return gcd(y, x % y);
   }

   public static long pow(long n, long p, long m) {
      long result = 1;
      if (p == 0)
         return 1;
      if (p == 1)
         return n;
      while (p != 0) {
         if (p % 2 == 1)
            result *= n;
         if (result >= m)
            result %= m;
         p >>= 1;
         n *= n;
         if (n >= m)
            n %= m;
      }
      return result;
   }

   static class Pair implements Comparable<Pair> {
      int a, b;

      Pair(int a, int b) {
         this.a = a;
         this.b = b;
      }

      public int compareTo(Pair o) {
         if (this.a != o.a)
            return Integer.compare(this.a, o.a);
         else
            return Integer.compare(this.b, o.b);
         // return 0;
      }

      public boolean equals(Object o) {
         if (o instanceof Pair) {
            Pair p = (Pair) o;
            return p.a == a && p.b == b;
         }
         return false;
      }

      public int hashCode() {
         return new Integer(a).hashCode() * 31 + new Integer(b).hashCode();
      }
   }

   static class FastScanner {
      BufferedReader br;
      StringTokenizer st;

      public FastScanner() {
         br = new BufferedReader(new InputStreamReader(System.in));
      }

      String next() {
         while (st == null || !st.hasMoreElements()) {
            try {
               st = new StringTokenizer(br.readLine());
            } catch (IOException e) {
               e.printStackTrace();
            }
         }
         return st.nextToken();
      }

      int nextInt() {
         return Integer.parseInt(next());
      }

      long nextLong() {
         return Long.parseLong(next());
      }

      String nextLine() throws IOException {
         String st = br.readLine();
         return st;
      }
   }
}