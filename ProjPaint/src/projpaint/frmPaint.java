
package projpaint;

import java.awt.Toolkit;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ColorPicker;
import javafx.scene.control.Slider;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;


public class frmPaint extends javax.swing.JFrame {
    JFXPanel pnl;
    
    public frmPaint() {
        initComponents();
        int height=Toolkit.getDefaultToolkit().getScreenSize().height;
        int width=Toolkit.getDefaultToolkit().getScreenSize().width;
        setSize(width,height);
        pnl = new JFXPanel();
        getContentPane().add(pnl);
        ColorPicker choose = new ColorPicker();
        
        Slider sld = new Slider();
        sld.setPrefSize(width-300, 20);
        sld.setMax(1000);
        sld.setMin(1);
        
        Canvas can = new Canvas(width,height-100);
        GraphicsContext gc = can.getGraphicsContext2D();
        
        gc.setStroke(choose.getValue());
        gc.setLineWidth(sld.getValue());
                
        CheckBox chkb = new CheckBox("Erase");
        
        HBox hbb = new HBox();
        hbb.getChildren().addAll(choose,chkb,sld);
        hbb.setSpacing(50);
        
        VBox root = new VBox();
        root.getChildren().addAll(hbb,can);
        
        Scene scn = new Scene(root,width,height);
        scn.setFill(Color.CORNSILK);
        pnl.setScene(scn);
        pnl.setSize(width,height);
        
        scn.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                if(chkb.isSelected()) {
                    gc.beginPath();
                    gc.clearRect(event.getSceneX(), event.getSceneY(), sld.getValue(), sld.getValue());
                }
                else {
                    gc.beginPath();
                    gc.lineTo(event.getSceneX(), event.getSceneY()-33);
                    gc.stroke();
                }
            }  
        });
        
        scn.setOnMouseDragged(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                if(chkb.isSelected()) {
                    gc.beginPath();
                    gc.clearRect(event.getSceneX(), event.getSceneY(), sld.getValue(), sld.getValue());
                }
                else {
                    gc.lineTo(event.getSceneX(), event.getSceneY()-33);
                    gc.stroke();
                }
            } 
        });
        
        choose.setOnAction((ActionEvent event) -> {
            gc.setStroke(choose.getValue()); 
        });
        
        sld.setOnMouseDragged((MouseEvent event) -> {
            gc.setLineWidth(sld.getValue());
        });
        
        sld.setOnMouseClicked((MouseEvent event) -> {
            gc.setLineWidth(sld.getValue());
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 655, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 431, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPaint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPaint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
